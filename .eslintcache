[{"D:\\formik-form\\src\\index.js":"1","D:\\formik-form\\src\\App.js":"2","D:\\formik-form\\src\\Component\\RefactorForm.jsx":"3","D:\\formik-form\\src\\Component\\SimpleForm.jsx":"4","D:\\formik-form\\src\\Component\\TextError.jsx":"5","D:\\formik-form\\src\\Component\\DisableSubmitForm.jsx":"6","D:\\formik-form\\src\\Advanced\\FormikContainer.jsx":"7","D:\\formik-form\\src\\Advanced\\FormikControl.jsx":"8","D:\\formik-form\\src\\Advanced\\Input.jsx":"9","D:\\formik-form\\src\\Advanced\\TextError.jsx":"10","D:\\formik-form\\src\\Advanced\\Textarea.jsx":"11","D:\\formik-form\\src\\Advanced\\Select.jsx":"12","D:\\formik-form\\src\\Advanced\\Radio.jsx":"13"},{"size":220,"mtime":1608371604170,"results":"14","hashOfConfig":"15"},{"size":494,"mtime":1608735662021,"results":"16","hashOfConfig":"15"},{"size":5521,"mtime":1608501009481,"results":"17","hashOfConfig":"15"},{"size":2590,"mtime":1608416387720,"results":"18","hashOfConfig":"15"},{"size":189,"mtime":1608475256545,"results":"19","hashOfConfig":"15"},{"size":2382,"mtime":1608564603951,"results":"20","hashOfConfig":"15"},{"size":1990,"mtime":1608761286463,"results":"21","hashOfConfig":"15"},{"size":595,"mtime":1608760590063,"results":"22","hashOfConfig":"15"},{"size":499,"mtime":1608740755663,"results":"23","hashOfConfig":"15"},{"size":188,"mtime":1608740752430,"results":"24","hashOfConfig":"15"},{"size":470,"mtime":1608741357067,"results":"25","hashOfConfig":"15"},{"size":762,"mtime":1608758738685,"results":"26","hashOfConfig":"15"},{"size":960,"mtime":1608761206902,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"12c0mhs",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\formik-form\\src\\index.js",[],["57","58"],"D:\\formik-form\\src\\App.js",[],"D:\\formik-form\\src\\Component\\RefactorForm.jsx",["59"],"import React from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage, FieldArray, FastField } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport TextError from \"./TextError\";\r\n\r\nconst initialValues = {\r\n  name: \"\",\r\n  email: \"\",\r\n  channel: \"\",\r\n  comment: \"\",\r\n  address: \"\",\r\n  social: {\r\n    facebook: \"\",\r\n    instagram: \"\",\r\n  },\r\n  phoneNumber: ['', ''],\r\n  phNumbers: [''],\r\n};\r\n\r\nconst onSubmit = (values) => {\r\n  alert(JSON.stringify(values, null, 2));\r\n};\r\n\r\nconst validationSchema = Yup.object({\r\n  name: Yup.string().required(\"Required!\"),\r\n  email: Yup.string().email(\"Invalid Email Format\").required(\"Required!\"),\r\n  channel: Yup.string().required(\"Required!\"),\r\n  comment: Yup.string().required(\"Required!\"),\r\n  address: Yup.string().required(\"Required!\"),\r\n  social: Yup.object({\r\n    facebook: Yup.string().required(\"Required!\"),\r\n    instagram: Yup.string().required(\"Required!\")\r\n  })\r\n});\r\n\r\nfunction RefactorForm() {\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema={validationSchema}\r\n      onSubmit={onSubmit}\r\n    >\r\n      <Form>\r\n        <h2>YouTube Form</h2>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"name\">Name</label>\r\n          <Field type=\"text\" id=\"name\" name=\"name\" />\r\n          <ErrorMessage name=\"name\" component={TextError} />\r\n        </div>\r\n\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"email\">Email</label>\r\n          <Field type=\"email\" id=\"email\" name=\"email\" />\r\n          <ErrorMessage name=\"email\">\r\n             {\r\n               (errorMessage) => <div className=\"error\">{errorMessage}</div>\r\n             }\r\n          </ErrorMessage>\r\n        </div>\r\n\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"channel\">Channel</label>\r\n          <Field type=\"text\" id=\"channel\" name=\"channel\" />\r\n          <ErrorMessage name=\"channel\">\r\n             {\r\n               (errorMessage) => <div className=\"error\">{errorMessage}</div>\r\n             }\r\n          </ErrorMessage>\r\n        </div>\r\n\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"comment\">Comment</label>\r\n          <Field as=\"textarea\" id=\"comment\" name=\"comment\" />\r\n          <ErrorMessage name=\"comment\">\r\n             {\r\n               (errorMessage) => <div className=\"error\">{errorMessage}</div>\r\n             }\r\n          </ErrorMessage>\r\n        </div>\r\n\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"address\">Address</label>\r\n          <Field name=\"address\">\r\n             { props => {\r\n                // const { field, form, meta } = props;\r\n                console.log('Render Field')\r\n                 //console.log('Render Props', props)\r\n                 return (\r\n                   <div>\r\n                     <input type=\"text\" id=\"address\" {...props.field}/>\r\n                     {props.meta.touched && props.meta.error ? <div>{props.meta.error}</div>: null}\r\n                   </div>\r\n                 )\r\n             }}\r\n          </Field>\r\n          <ErrorMessage name=\"address\">\r\n             {\r\n               (errorMessage) => <div className=\"error\">{errorMessage}</div>\r\n             }\r\n          </ErrorMessage>\r\n        </div>\r\n\r\n        {/* Manage Object */}\r\n\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"facebook\">Facebook</label>\r\n          <Field type=\"text\" name=\"social.facebook\" id=\"facebook\"/>\r\n          <ErrorMessage name=\"social.facebook\" component={TextError}/>\r\n        </div>\r\n\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"instagram\">Instagram</label>\r\n          <Field type=\"text\" name=\"social.instagram\" id=\"instagram\"/>\r\n          <ErrorMessage name=\"social.instagram\" component={TextError}/>\r\n        </div>\r\n\r\n        {/* Manage Array */}\r\n\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"primaryPh\">Primary Phone Number</label>\r\n          <Field type=\"text\" name=\"phoneNumber[0]\" id=\"primaryPh\"/>\r\n          {/* <ErrorMessage name=\"phoneNumber[0]\" component={TextError}/> */}\r\n        </div>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"secondaryPh\">Primary Phone Number</label>\r\n          <Field type=\"text\" name=\"phoneNumber[1]\" id=\"secondaryPh\"/>\r\n          {/* <ErrorMessage name=\"phoneNumber[1]\" component={TextError}/> */}\r\n        </div>\r\n\r\n        <div className=\"form-control\">\r\n           <label htmlFor=\"phNumbers\">List Of Phone Numbers</label>\r\n           <FieldArray name=\"phNumbers\">\r\n              { fieldArrayProps => {\r\n                const { form, push, remove } = fieldArrayProps;\r\n                const { values } = form;\r\n                const { phNumbers } = values;\r\n                //console.log(fieldArrayProps, \"fieldArrayProps\")\r\n                return (\r\n                  <div>\r\n                     {phNumbers.map((phNumber, index) => (\r\n                       <div key={index}>\r\n                           <Field name={`phNumbers[${index}]`} />\r\n                           {\r\n                             index > 0 && <button type=\"button\" onClick={() => remove(index)}>-</button>\r\n                           }\r\n                           \r\n                           <button type=\"button\" onClick={() => push('')}>+</button>\r\n                       </div>\r\n                     ))}\r\n                  </div>\r\n                )\r\n              }}\r\n           </FieldArray>\r\n        </div>\r\n\r\n        <button type=\"submit\">Submit</button>\r\n      </Form>\r\n    </Formik>\r\n  );\r\n}\r\n\r\nexport default RefactorForm;\r\n",["60","61"],"D:\\formik-form\\src\\Component\\SimpleForm.jsx",[],"D:\\formik-form\\src\\Component\\TextError.jsx",[],"D:\\formik-form\\src\\Component\\DisableSubmitForm.jsx",[],"D:\\formik-form\\src\\Advanced\\FormikContainer.jsx",[],"D:\\formik-form\\src\\Advanced\\FormikControl.jsx",[],"D:\\formik-form\\src\\Advanced\\Input.jsx",[],"D:\\formik-form\\src\\Advanced\\TextError.jsx",[],"D:\\formik-form\\src\\Advanced\\Textarea.jsx",[],"D:\\formik-form\\src\\Advanced\\Select.jsx",[],"D:\\formik-form\\src\\Advanced\\Radio.jsx",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":2,"column":57,"nodeType":"68","messageId":"69","endLine":2,"endColumn":66},{"ruleId":"62","replacedBy":"70"},{"ruleId":"64","replacedBy":"71"},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"no-unused-vars","'FastField' is defined but never used.","Identifier","unusedVar",["72"],["73"],"no-global-assign","no-unsafe-negation"]